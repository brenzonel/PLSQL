/*VALIDACIONES DE JSON*/

--TABLA CON DATOS EN JSON
CREATE TABLE VALJSON (COL1 VARCHAR2(100));
/
INSERT INTO VALJSON VALUES ( '[ "LIT192", "CS141", "HIS160" ]' );
INSERT INTO VALJSON VALUES ( '{ "Name": "John" }' );
INSERT INTO VALJSON VALUES ( '{ "Grade Values" : { A : 4.0, B : 3.0, C : 2.0 } }');
INSERT INTO VALJSON VALUES ( '{ "isEnrolled" : true }' );
INSERT INTO VALJSON VALUES ( '{ "isMatriculated" : False }' );
INSERT INTO VALJSON VALUES (NULL);
INSERT INTO VALJSON VALUES ('This is not well-formed JSON data');
/
COMMIT;
/
--VALIDACION DEL CAMPO SI ES UN JSON O NO
SELECT COL1 FROM VALJSON
WHERE 1=1
AND COL1 IS JSON
;
--VALIDACION DEL CAMPO SI USA LA SINTAXIS JSON
SELECT COL1 FROM VALJSON
WHERE 1=1
AND COL1 IS JSON STRICT
;
--VALIDACION DEL CAMPO SI NO USA LA SINTAXIS JSON ESTRICTAMENTE Y ES ACEPTABLE
SELECT COL1 FROM VALJSON
WHERE 1=1
AND COL1 IS NOT JSON STRICT AND COL1 IS JSON LAX
;

--TABLA CON DATOS EN JSON CON LLAVES

CREATE TABLE VALJSONKEY (COL1 VARCHAR2(100));
/
INSERT INTO VALJSONKEY VALUES ('{a:100, b:200, c:300}');
INSERT INTO VALJSONKEY VALUES ('{a:100, a:200, b:300}');
INSERT INTO VALJSONKEY VALUES ('{a:100, b : {a:100, c:300}}');
/
COMMIT;
--VALIDACION DE DATOS QUE TIENEN LLAVES UNICAS
SELECT COL1 FROM VALJSONKEY 
WHERE 1=1
AND COL1 IS JSON WITH UNIQUE KEYS
;

--VALIDACION DE DATOS QUE NO TIENEN LLAVES UNICAS
SELECT COL1 FROM VALJSONKEY 
WHERE 1=1
AND COL1 IS JSON WITHOUT UNIQUE KEYS
;

--TABLA CON DATOS EN JSON VARIADO
CREATE TABLE VALJSON2 (NAME VARCHAR2(100));
/
INSERT INTO VALJSON2 VALUES ('[{first:"John"}, {middle:"Mark"}, {last:"Smith"}]');
INSERT INTO VALJSON2 VALUES ('[{first:"Mary"}, {last:"Jones"}]');
INSERT INTO VALJSON2 VALUES ('[{first:"Jeff"}, {last:"Williams"}]');
INSERT INTO VALJSON2 VALUES ('[{first:"Jean"}, {middle:"Anne"}, {last:"Brown"}]');
INSERT INTO VALJSON2 VALUES (NULL);
INSERT INTO VALJSON2 VALUES ('This is not well-formed JSON data');
/
COMMIT;
/
--DATOS QUE CONTIENEN COMO PRIMER ELEMENTO UN OBJETO LLAMADO 'first' 
SELECT name FROM VALJSON2
  WHERE 1=1
  AND JSON_EXISTS(name, '$[0].first')
  ;
--Y COMO SEGUNDO DATO 'middle'
SELECT name FROM VALJSON2
  WHERE 1=1
  AND JSON_EXISTS(name, '$[1].middle')
  ;
--DATOS QUE TIENEN COMO SEGUNDO ELEMENTO UN OBJETO LLAMADO 'middle' Y QUE NO ESTAN BIEN FORMADOS COMO JSON
SELECT name FROM VALJSON2
  WHERE 1=1
  AND JSON_EXISTS(name, '$[1].middle' TRUE ON ERROR)
  ;
--DATOS QUE TIENEN COMO UN OBJETO LLAMADO 'last' EN ALGUNA LUGAR DEL JSON
SELECT name FROM VALJSON2
  WHERE 1=1
  AND JSON_EXISTS(name, '$[*].last')
  ;
--DATOS QUE TIENEN EL VALOR PASADO EN LA VARIABLE var1 EN EL JSON EN EL OBJETO 'middle'
SELECT name FROM VALJSON2
  WHERE 1=1
  AND JSON_EXISTS(name, '$[1]?(@.middle == $var1)' PASSING 'Anne' as "var1")
  --JSON_EXISTS(name, '$[*]?(@.middle == $var1)' PASSING 'Anne' as "var1") 
  ;
  
--TABLA CON DATOS EN JSON PARA USAR TEXT CONTAIN
CREATE TABLE families (family_doc VARCHAR2(200));
/
CREATE INDEX ix
  ON families(family_doc)
  INDEXTYPE IS CTXSYS.CONTEXT
  PARAMETERS ('SECTION GROUP CTXSYS.JSON_SECTION_GROUP SYNC (ON COMMIT)');
/
INSERT INTO families VALUES ('{family : {id:10, ages:[40,38,12], address : {street : "10 Main Street"}}}');
INSERT INTO families VALUES ('{family : {id:11, ages:[42,40,10,5], address : {street : "200 East Street", apt : 20}}}');
INSERT INTO families VALUES ('{family : {id:12, ages:[25,23], address : {street : "300 Oak Street", apt : 10}}}');
/
COMMIT;
/
--DATOS EN JSON QUE CONTIENE EL VALOR '10' EN CUALQUIERA DE LOS ELEMENTOS
SELECT family_doc FROM families
  WHERE 1=1
  AND JSON_TEXTCONTAINS(family_doc, '$', '10')
  ;
--DATOS EN JSON QUE TIENEN EL VALOR '10' EN EL ELEMNTO 'ID' DEL JSON
SELECT family_doc FROM families
  WHERE 1=1
  AND JSON_TEXTCONTAINS(family_doc, '$.family.id', '10')
  --JSON_TEXTCONTAINS(family_doc, '$.family.id', '11')
  ;
--Y EN EL ELEMENTO 'ADDRES'
SELECT family_doc FROM families
  WHERE 1=1
  AND JSON_TEXTCONTAINS(family_doc, '$.family.address', '10')
  --JSON_TEXTCONTAINS(family_doc, '$.family.address', '25')
  ;
--DATOS EN EL JSON USANDO LA RAMA PARA BUSCAR EL VALOR '10' EN EL ELEMENTO 'APT'
SELECT family_doc FROM families
  WHERE 1=1
  AND JSON_TEXTCONTAINS(family_doc, '$.family.address.apt', '10')
  --JSON_TEXTCONTAINS(family_doc, '$.family.address.apt', '20')
  ;
  
--PRESENTACION DE DATOS COMO JSON
SELECT JSON_OBJECT(
'name' : EMP_NAME ,
'email' : EMAIL,
'phone' : NULL,
'hire_date' : HIRE_DATE
) EMP_DATA
FROM PR_EMPLOYEES
WHERE EMP_ID = 1
;
--PRESENTACION DE TODOS LOS DATOS COMO JSON
SELECT JSON_OBJECT(*) FROM PR_EMPLOYEES
WHERE EMP_ID = 1
;