  CREATE TABLE "DEPARTMENTS" 
   (	"ID" NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 5 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"NAME" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	"LOCATION" VARCHAR2(4000 CHAR), 
	"COUNTRY" VARCHAR2(4000 CHAR), 
	 CONSTRAINT "DEPARTMENTS_ID_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "PRODUCTS" 
   (	"PRODUCT_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 50 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"PRODUCT_NAME" VARCHAR2(255) NOT NULL ENABLE, 
	"UNIT_PRICE" NUMBER(10,2), 
	"PRODUCT_DETAILS" BLOB, 
	"PRODUCT_IMAGE" BLOB, 
	"IMAGE_MIME_TYPE" VARCHAR2(512), 
	"IMAGE_FILENAME" VARCHAR2(512), 
	"IMAGE_CHARSET" VARCHAR2(512), 
	"IMAGE_LAST_UPDATED" DATE, 
	"COLOR_ID" NUMBER, 
	"DEPARTMENT_ID" NUMBER, 
	"CLOTHING_ID" NUMBER, 
	 CONSTRAINT "PRODUCTS_PK" PRIMARY KEY ("PRODUCT_ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "PRODUCT_JSON_C" CHECK (product_details is json) ENABLE
   ) ;

  CREATE TABLE "STORES" 
   (	"STORE_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 25 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"STORE_NAME" VARCHAR2(255) NOT NULL ENABLE, 
	"WEB_ADDRESS" VARCHAR2(100), 
	"PHYSICAL_ADDRESS" VARCHAR2(512), 
	"LATITUDE" NUMBER, 
	"LONGITUDE" NUMBER, 
	"LOGO" BLOB, 
	"LOGO_MIME_TYPE" VARCHAR2(512), 
	"LOGO_FILENAME" VARCHAR2(512), 
	"LOGO_CHARSET" VARCHAR2(512), 
	"LOGO_LAST_UPDATED" DATE, 
	 CONSTRAINT "STORES_PK" PRIMARY KEY ("STORE_ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "STORE_NAME_U" UNIQUE ("STORE_NAME")
  USING INDEX  ENABLE, 
	 CONSTRAINT "STORE_AT_LEAST_ONE_ADDRESS_C" CHECK (coalesce ( web_address, physical_address ) is not null) ENABLE
   ) ;

  CREATE TABLE "CLOTHING_LOOKUP" 
   (	"CLOTHING_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"CLOTHING" VARCHAR2(4000) NOT NULL ENABLE, 
	 CONSTRAINT "CLOTHING_LOOKUP_PK" PRIMARY KEY ("CLOTHING_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "COLOR_LOOKUP" 
   (	"COLOR_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"COLOR" VARCHAR2(4000) NOT NULL ENABLE, 
	 CONSTRAINT "COLOR_LOOKUP_PK" PRIMARY KEY ("COLOR_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "CUSTOMERS" 
   (	"CUSTOMER_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 400 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"FULL_NAME" VARCHAR2(255) NOT NULL ENABLE, 
	"EMAIL_ADDRESS" VARCHAR2(255) NOT NULL ENABLE, 
	 CONSTRAINT "CUSTOMERS_PK" PRIMARY KEY ("CUSTOMER_ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "CUSTOMERS_EMAIL_U" UNIQUE ("EMAIL_ADDRESS")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "DEMO_PROJECTS" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"PROJECT" VARCHAR2(50), 
	"TASK_NAME" VARCHAR2(255), 
	"START_DATE" DATE, 
	"END_DATE" DATE, 
	"STATUS" VARCHAR2(50), 
	"ASSIGNED_TO" VARCHAR2(50), 
	"COST" NUMBER, 
	"BUDGET" NUMBER, 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "DEPARTMENT_LOOKUP" 
   (	"DEPARTMENT_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"DEPARTMENT" VARCHAR2(4000) NOT NULL ENABLE, 
	 CONSTRAINT "DEPARTMENT_LOOKUP_PK" PRIMARY KEY ("DEPARTMENT_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "EBA_DEMO_IR_DEPT" 
   (	"DEPTNO" NUMBER(2,0) NOT NULL ENABLE, 
	"DNAME" VARCHAR2(14), 
	"LOC" VARCHAR2(13), 
	 CONSTRAINT "EBA_DEMO_IR_DEPT_PK" PRIMARY KEY ("DEPTNO")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "EBA_DEMO_IR_EMP" 
   (	"EMPNO" NUMBER(4,0) NOT NULL ENABLE, 
	"ENAME" VARCHAR2(10), 
	"JOB" VARCHAR2(9), 
	"MGR" NUMBER(4,0), 
	"HIREDATE" DATE, 
	"SAL" NUMBER(7,0), 
	"COMM" NUMBER(7,0), 
	"DEPTNO" NUMBER(2,0), 
	 CONSTRAINT "EBA_DEMO_IR_EMP_PK" PRIMARY KEY ("EMPNO")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "EBA_DEMO_IR_PROJECTS" 
   (	"ID" NUMBER, 
	"ROW_VERSION_NUMBER" NUMBER, 
	"PROJECT" VARCHAR2(30), 
	"TASK_NAME" VARCHAR2(255), 
	"START_DATE" DATE, 
	"END_DATE" DATE, 
	"STATUS" VARCHAR2(30), 
	"ASSIGNED_TO" VARCHAR2(30), 
	"COST" NUMBER, 
	"BUDGET" NUMBER
   ) ;

  CREATE TABLE "EBA_PROJECTS" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"STATUS_ID" NUMBER, 
	"NAME" VARCHAR2(255) NOT NULL ENABLE, 
	"DESCRIPTION" VARCHAR2(4000), 
	"PROJECT_LEAD" VARCHAR2(255), 
	"BUDGET" NUMBER, 
	"COMPLETED_DATE" DATE, 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE NOT NULL ENABLE, 
	"CREATED_BY" VARCHAR2(255) NOT NULL ENABLE, 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE NOT NULL ENABLE, 
	"UPDATED_BY" VARCHAR2(255) NOT NULL ENABLE, 
	 CONSTRAINT "EBA_PROJECTS_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "EBA_PROJECTS_UK" UNIQUE ("NAME")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "EBA_PROJECT_COMMENTS" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"PROJECT_ID" NUMBER NOT NULL ENABLE, 
	"COMMENT_TEXT" VARCHAR2(4000) NOT NULL ENABLE, 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE NOT NULL ENABLE, 
	"CREATED_BY" VARCHAR2(255) NOT NULL ENABLE, 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE NOT NULL ENABLE, 
	"UPDATED_BY" VARCHAR2(255) NOT NULL ENABLE, 
	 CONSTRAINT "EBA_PROJECT_COMMENTS_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "EBA_PROJECT_MILESTONES" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"PROJECT_ID" NUMBER NOT NULL ENABLE, 
	"NAME" VARCHAR2(255) NOT NULL ENABLE, 
	"DESCRIPTION" VARCHAR2(4000), 
	"DUE_DATE" DATE NOT NULL ENABLE, 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE NOT NULL ENABLE, 
	"CREATED_BY" VARCHAR2(255) NOT NULL ENABLE, 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE NOT NULL ENABLE, 
	"UPDATED_BY" VARCHAR2(255) NOT NULL ENABLE, 
	 CONSTRAINT "EBA_PROJECT_MILESTONES_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "EBA_PROJECT_STATUS" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 4 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"CODE" VARCHAR2(15) NOT NULL ENABLE, 
	"DESCRIPTION" VARCHAR2(255) NOT NULL ENABLE, 
	"DISPLAY_ORDER" NUMBER NOT NULL ENABLE, 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE NOT NULL ENABLE, 
	"CREATED_BY" VARCHAR2(255) NOT NULL ENABLE, 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE NOT NULL ENABLE, 
	"UPDATED_BY" VARCHAR2(255) NOT NULL ENABLE, 
	 CONSTRAINT "EBA_PROJECT_USERS_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "EBA_PROJECT_STATUS_UK" UNIQUE ("CODE")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "EBA_PROJECT_TASKS" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"PROJECT_ID" NUMBER NOT NULL ENABLE, 
	"MILESTONE_ID" NUMBER, 
	"NAME" VARCHAR2(255) NOT NULL ENABLE, 
	"DESCRIPTION" VARCHAR2(4000), 
	"ASSIGNEE" VARCHAR2(255), 
	"START_DATE" DATE NOT NULL ENABLE, 
	"END_DATE" DATE NOT NULL ENABLE, 
	"COST" NUMBER, 
	"IS_COMPLETE_YN" VARCHAR2(1), 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE NOT NULL ENABLE, 
	"CREATED_BY" VARCHAR2(255) NOT NULL ENABLE, 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE NOT NULL ENABLE, 
	"UPDATED_BY" VARCHAR2(255) NOT NULL ENABLE, 
	 CONSTRAINT "EBA_PROJECT_TASKS_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "EBA_PROJECT_TASKS_UK" UNIQUE ("PROJECT_ID", "NAME")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "EBA_PROJECT_TASK_LINKS" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"PROJECT_ID" NUMBER NOT NULL ENABLE, 
	"TASK_ID" NUMBER NOT NULL ENABLE, 
	"LINK_TYPE" VARCHAR2(20) NOT NULL ENABLE, 
	"URL" VARCHAR2(255), 
	"APPLICATION_ID" NUMBER, 
	"APPLICATION_PAGE" NUMBER, 
	"DESCRIPTION" VARCHAR2(4000), 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE NOT NULL ENABLE, 
	"CREATED_BY" VARCHAR2(255) NOT NULL ENABLE, 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE NOT NULL ENABLE, 
	"UPDATED_BY" VARCHAR2(255) NOT NULL ENABLE, 
	 CONSTRAINT "EBA_PROJECT_TASK_LINKS_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "EBA_PROJECT_TSK_LINK_LTY_CH" CHECK ( link_type in ('URL','Application')) ENABLE
   ) ;

  CREATE TABLE "EBA_PROJECT_TASK_TODOS" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"PROJECT_ID" NUMBER NOT NULL ENABLE, 
	"TASK_ID" NUMBER NOT NULL ENABLE, 
	"NAME" VARCHAR2(255) NOT NULL ENABLE, 
	"DESCRIPTION" VARCHAR2(4000), 
	"ASSIGNEE" VARCHAR2(255), 
	"IS_COMPLETE_YN" VARCHAR2(1), 
	"CREATED" TIMESTAMP (6) WITH TIME ZONE NOT NULL ENABLE, 
	"CREATED_BY" VARCHAR2(255) NOT NULL ENABLE, 
	"UPDATED" TIMESTAMP (6) WITH TIME ZONE NOT NULL ENABLE, 
	"UPDATED_BY" VARCHAR2(255) NOT NULL ENABLE, 
	 CONSTRAINT "EBA_PROJECT_TASK_TODOS_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "EMPLOYEES" 
   (	"ID" NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 15 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"DEPARTMENT_ID" NUMBER, 
	"NAME" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"EMAIL" VARCHAR2(255 CHAR), 
	"COST_CENTER" NUMBER, 
	"DATE_HIRED" DATE, 
	"JOB" VARCHAR2(255 CHAR), 
	 CONSTRAINT "EMPLOYEES_ID_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "HTMLDB_PLAN_TABLE" 
   (	"STATEMENT_ID" VARCHAR2(30), 
	"PLAN_ID" NUMBER, 
	"TIMESTAMP" DATE, 
	"REMARKS" VARCHAR2(4000), 
	"OPERATION" VARCHAR2(30), 
	"OPTIONS" VARCHAR2(255), 
	"OBJECT_NODE" VARCHAR2(128), 
	"OBJECT_OWNER" VARCHAR2(128), 
	"OBJECT_NAME" VARCHAR2(128), 
	"OBJECT_ALIAS" VARCHAR2(261), 
	"OBJECT_INSTANCE" NUMBER(*,0), 
	"OBJECT_TYPE" VARCHAR2(128), 
	"OPTIMIZER" VARCHAR2(255), 
	"SEARCH_COLUMNS" NUMBER, 
	"ID" NUMBER(*,0), 
	"PARENT_ID" NUMBER(*,0), 
	"DEPTH" NUMBER(*,0), 
	"POSITION" NUMBER(*,0), 
	"COST" NUMBER(*,0), 
	"CARDINALITY" NUMBER(*,0), 
	"BYTES" NUMBER(*,0), 
	"OTHER_TAG" VARCHAR2(255), 
	"PARTITION_START" VARCHAR2(255), 
	"PARTITION_STOP" VARCHAR2(255), 
	"PARTITION_ID" NUMBER(*,0), 
	"OTHER" LONG, 
	"DISTRIBUTION" VARCHAR2(30), 
	"CPU_COST" NUMBER(*,0), 
	"IO_COST" NUMBER(*,0), 
	"TEMP_SPACE" NUMBER(*,0), 
	"ACCESS_PREDICATES" VARCHAR2(4000), 
	"FILTER_PREDICATES" VARCHAR2(4000), 
	"PROJECTION" VARCHAR2(4000), 
	"TIME" NUMBER(*,0), 
	"QBLOCK_NAME" VARCHAR2(128)
   ) ;

  CREATE TABLE "ORDERS" 
   (	"ORDER_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 2000 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"ORDER_DATETIME" TIMESTAMP (6) NOT NULL ENABLE, 
	"CUSTOMER_ID" NUMBER NOT NULL ENABLE, 
	"ORDER_STATUS" VARCHAR2(10) NOT NULL ENABLE, 
	"STORE_ID" NUMBER NOT NULL ENABLE, 
	 CONSTRAINT "ORDERS_PK" PRIMARY KEY ("ORDER_ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "ORDER_STATUS_C" CHECK (order_status in ('CANCELLED','COMPLETE','OPEN','PAID','REFUNDED','SHIPPED')) ENABLE
   ) ;

  CREATE TABLE "ORDER_ITEMS" 
   (	"ORDER_ID" NUMBER NOT NULL ENABLE, 
	"LINE_ITEM_ID" NUMBER NOT NULL ENABLE, 
	"PRODUCT_ID" NUMBER NOT NULL ENABLE, 
	"UNIT_PRICE" NUMBER(10,2) NOT NULL ENABLE, 
	"QUANTITY" NUMBER NOT NULL ENABLE, 
	 CONSTRAINT "ORDER_ITEMS_PK" PRIMARY KEY ("ORDER_ID", "LINE_ITEM_ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "ORDER_ITEMS_PRODUCT_U" UNIQUE ("PRODUCT_ID", "ORDER_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "PROJECTS" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"PROJECT" VARCHAR2(50), 
	"TASK_NAME" VARCHAR2(255), 
	"START_DATE" DATE, 
	"END_DATE" DATE, 
	"ASSIGNED_TO" VARCHAR2(50), 
	"COST" VARCHAR2(50), 
	"BUDGET" NUMBER, 
	"STATUS" VARCHAR2(50), 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

  CREATE INDEX "CUSTOMERS_NAME_I" ON "CUSTOMERS" ("FULL_NAME") 
  ;

   COMMENT ON COLUMN "CUSTOMERS"."CUSTOMER_ID" IS 'Auto-incrementing primary key';
   COMMENT ON COLUMN "CUSTOMERS"."FULL_NAME" IS 'What this customer is called';
   COMMENT ON COLUMN "CUSTOMERS"."EMAIL_ADDRESS" IS 'The email address the person uses to access the account';
   COMMENT ON TABLE "CUSTOMERS"  IS 'Details of the people placing orders';

  ALTER TABLE "EBA_DEMO_IR_EMP" ADD FOREIGN KEY ("MGR")
	  REFERENCES "EBA_DEMO_IR_EMP" ("EMPNO") ENABLE;

  CREATE INDEX "EBA_DEMO_IR_EMP_1" ON "EBA_DEMO_IR_EMP" ("MGR") 
  ;

  CREATE INDEX "EBA_DEMO_IR_EMP_2" ON "EBA_DEMO_IR_EMP" ("DEPTNO") 
  ;

  CREATE UNIQUE INDEX "EBA_DEMO_IR_PROJECTS_PK" ON "EBA_DEMO_IR_PROJECTS" ("ID") 
  ;

  CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_EBA_DEMO_IR_PROJECTS" 
BEFORE INSERT OR UPDATE ON EBA_DEMO_IR_PROJECTS
FOR EACH ROW
BEGIN
   if :new."ID" is null then
     select to_number(sys_guid(),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX') into :new.id from dual;
   end if;
   if inserting then
       :new.row_version_number := 1;
   elsif updating then
       :new.row_version_number := nvl(:old.row_version_number,1) + 1;
   end if;
   if :new.start_date > :new.end_date then
       RAISE_APPLICATION_ERROR(-20001, 'Error start date must be before end date');
   end if;
END;
/
ALTER TRIGGER "BIU_EBA_DEMO_IR_PROJECTS" ENABLE;

  ALTER TABLE "EBA_PROJECTS" ADD CONSTRAINT "EBA_PROJECT_STATUS_FK" FOREIGN KEY ("STATUS_ID")
	  REFERENCES "EBA_PROJECT_STATUS" ("ID") ON DELETE SET NULL ENABLE;

  CREATE INDEX "EBA_PROJECTS_STATUS_IDX" ON "EBA_PROJECTS" ("STATUS_ID") 
  ;

  CREATE OR REPLACE EDITIONABLE TRIGGER "EBA_PROJECTS_BIU" 
    before insert or update on eba_projects
    for each row
begin
    if inserting then
        :new.created    := current_timestamp;
        :new.created_by := nvl(wwv_flow.g_user,user);
    end if;
    :new.updated    := current_timestamp;
    :new.updated_by := nvl(wwv_flow.g_user,user);
end;
/
ALTER TRIGGER "EBA_PROJECTS_BIU" ENABLE;

  ALTER TABLE "EBA_PROJECT_COMMENTS" ADD CONSTRAINT "EBA_PROJECT_COMMENT_PROJ_FK" FOREIGN KEY ("PROJECT_ID")
	  REFERENCES "EBA_PROJECTS" ("ID") ON DELETE CASCADE ENABLE;

  CREATE INDEX "EBA_PROJECT_COMMENT_PRJ_IDX" ON "EBA_PROJECT_COMMENTS" ("PROJECT_ID") 
  ;

  CREATE OR REPLACE EDITIONABLE TRIGGER "EBA_PROJECT_COMMENTS_BIU" 
    before insert or update on eba_project_comments
    for each row
begin
    if inserting then
        :new.created    := current_timestamp;
        :new.created_by := nvl(wwv_flow.g_user,user);
    end if;
    :new.updated    := current_timestamp;
    :new.updated_by := nvl(wwv_flow.g_user,user);
end;
/
ALTER TRIGGER "EBA_PROJECT_COMMENTS_BIU" ENABLE;

  ALTER TABLE "EBA_PROJECT_MILESTONES" ADD CONSTRAINT "EBA_PROJECT_MSTONE_PROJ_FK" FOREIGN KEY ("PROJECT_ID")
	  REFERENCES "EBA_PROJECTS" ("ID") ON DELETE CASCADE ENABLE;

  CREATE INDEX "EBA_PROJECT_MSTONE_PROJ_IDX" ON "EBA_PROJECT_MILESTONES" ("PROJECT_ID") 
  ;

  CREATE OR REPLACE EDITIONABLE TRIGGER "EBA_PROJECT_MILESTONES_BIU" 
    before insert or update on eba_project_milestones
    for each row
begin
    if inserting then
        :new.created    := current_timestamp;
        :new.created_by := nvl(wwv_flow.g_user,user);
    end if;
    :new.updated    := current_timestamp;
    :new.updated_by := nvl(wwv_flow.g_user,user);
end;
/
ALTER TRIGGER "EBA_PROJECT_MILESTONES_BIU" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "EBA_PROJECT_STATUS_BIU" 
before insert or update on eba_project_status
    for each row
begin
    if inserting then
        :new.created    := current_timestamp;
        :new.created_by := nvl(wwv_flow.g_user,user);
    end if;
    :new.code       := upper(:new.code);
    :new.updated    := current_timestamp;
    :new.updated_by := nvl(wwv_flow.g_user,user);
end;
/
ALTER TRIGGER "EBA_PROJECT_STATUS_BIU" ENABLE;

  ALTER TABLE "EBA_PROJECT_TASKS" ADD CONSTRAINT "EBA_PROJECT_TASK_PROJ_FK" FOREIGN KEY ("PROJECT_ID")
	  REFERENCES "EBA_PROJECTS" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "EBA_PROJECT_TASKS" ADD CONSTRAINT "EBA_PROJECT_TASK_MSTONE_FK" FOREIGN KEY ("MILESTONE_ID")
	  REFERENCES "EBA_PROJECT_MILESTONES" ("ID") ON DELETE SET NULL ENABLE;

  CREATE INDEX "EBA_PROJECT_TASK_MSTONE_IDX" ON "EBA_PROJECT_TASKS" ("MILESTONE_ID") 
  ;

  CREATE INDEX "EBA_PROJECT_TASK_PROJ_IDX" ON "EBA_PROJECT_TASKS" ("PROJECT_ID") 
  ;

  CREATE OR REPLACE EDITIONABLE TRIGGER "EBA_PROJECT_TASKS_BIU" 
    before insert or update on eba_project_tasks
    for each row
begin
    if inserting then
        :new.created    := current_timestamp;
        :new.created_by := nvl(wwv_flow.g_user,user);
    end if;
    :new.updated    := current_timestamp;
    :new.updated_by := nvl(wwv_flow.g_user,user);
end;
/
ALTER TRIGGER "EBA_PROJECT_TASKS_BIU" ENABLE;

  ALTER TABLE "EBA_PROJECT_TASK_LINKS" ADD CONSTRAINT "EBA_PROJECT_TSK_LINK_PRJ_FK" FOREIGN KEY ("PROJECT_ID")
	  REFERENCES "EBA_PROJECTS" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "EBA_PROJECT_TASK_LINKS" ADD CONSTRAINT "EBA_PROJECT_TSK_LINK_TSK_FK" FOREIGN KEY ("TASK_ID")
	  REFERENCES "EBA_PROJECT_TASKS" ("ID") ON DELETE CASCADE ENABLE;

  CREATE INDEX "EBA_PROJECT_TSK_LINK_PR_IDX" ON "EBA_PROJECT_TASK_LINKS" ("PROJECT_ID") 
  ;

  CREATE INDEX "EBA_PROJECT_TSK_LINK_TK_IDX" ON "EBA_PROJECT_TASK_LINKS" ("TASK_ID") 
  ;

  CREATE OR REPLACE EDITIONABLE TRIGGER "EBA_PROJECT_TASK_LINKS_BIU" 
    before insert or update on eba_project_task_links
    for each row
begin
    if inserting then
        :new.created    := current_timestamp;
        :new.created_by := nvl(wwv_flow.g_user,user);
    end if;
    :new.updated    := current_timestamp;
    :new.updated_by := nvl(wwv_flow.g_user,user);
end;
/
ALTER TRIGGER "EBA_PROJECT_TASK_LINKS_BIU" ENABLE;

  ALTER TABLE "EBA_PROJECT_TASK_TODOS" ADD CONSTRAINT "EBA_PROJ_TASK_TODO_PROJ_FK" FOREIGN KEY ("PROJECT_ID")
	  REFERENCES "EBA_PROJECTS" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "EBA_PROJECT_TASK_TODOS" ADD CONSTRAINT "EBA_PROJECT_TSK_TODO_TSK_FK" FOREIGN KEY ("TASK_ID")
	  REFERENCES "EBA_PROJECT_TASKS" ("ID") ON DELETE CASCADE ENABLE;

  CREATE INDEX "EBA_PROJECT_TSK_TODO_PR_IDX" ON "EBA_PROJECT_TASK_TODOS" ("PROJECT_ID") 
  ;

  CREATE INDEX "EBA_PROJECT_TSK_TODO_TK_IDX" ON "EBA_PROJECT_TASK_TODOS" ("TASK_ID") 
  ;

  CREATE OR REPLACE EDITIONABLE TRIGGER "EBA_PROJECT_TASK_TODOS_BIU" 
    before insert or update on eba_project_task_todos
    for each row
begin
    if inserting then
        :new.created    := current_timestamp;
        :new.created_by := nvl(wwv_flow.g_user,user);
    end if;
    :new.updated    := current_timestamp;
    :new.updated_by := nvl(wwv_flow.g_user,user);
end;
/
ALTER TRIGGER "EBA_PROJECT_TASK_TODOS_BIU" ENABLE;

  ALTER TABLE "EMPLOYEES" ADD CONSTRAINT "EMPLOYEES_DEPARTMENT_ID_FK" FOREIGN KEY ("DEPARTMENT_ID")
	  REFERENCES "DEPARTMENTS" ("ID") ENABLE;

  CREATE INDEX "EMPLOYEES_I1" ON "EMPLOYEES" ("DEPARTMENT_ID") 
  ;

  CREATE OR REPLACE EDITIONABLE TRIGGER "EMPLOYEES_BIU" 
    before insert or update 
    on employees 
    for each row 
begin 
    :new.email := lower(:new.email); 
end employees_biu;
/
ALTER TRIGGER "EMPLOYEES_BIU" ENABLE;

  ALTER TABLE "ORDERS" ADD CONSTRAINT "ORDERS_CUSTOMER_ID_FK" FOREIGN KEY ("CUSTOMER_ID")
	  REFERENCES "CUSTOMERS" ("CUSTOMER_ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "ORDERS" ADD CONSTRAINT "ORDERS_STORE_ID_FK" FOREIGN KEY ("STORE_ID")
	  REFERENCES "STORES" ("STORE_ID") ON DELETE CASCADE ENABLE;

  CREATE INDEX "ORDERS_CUSTOMER_ID_I" ON "ORDERS" ("CUSTOMER_ID") 
  ;

  CREATE INDEX "ORDERS_STORE_ID_I" ON "ORDERS" ("STORE_ID") 
  ;

   COMMENT ON COLUMN "ORDERS"."ORDER_ID" IS 'Auto-incrementing primary key';
   COMMENT ON COLUMN "ORDERS"."ORDER_DATETIME" IS 'When the order was placed';
   COMMENT ON COLUMN "ORDERS"."CUSTOMER_ID" IS 'Who placed this order';
   COMMENT ON COLUMN "ORDERS"."ORDER_STATUS" IS 'What state the order is in. Valid values are:
OPEN - the order is in progress.
PAID - money has been received from the customer for this order.
SHIPPED - the products have been dispatched to the customer.
COMPLETE - the customer has received the order.
CANCELLED - the customer has stopped the order.
REFUNDED - there has been an issue with the order and the money has been returned to the customer.';
   COMMENT ON COLUMN "ORDERS"."STORE_ID" IS 'Where this order was placed';
   COMMENT ON TABLE "ORDERS"  IS 'Details of who made purchases where';

  ALTER TABLE "ORDER_ITEMS" ADD CONSTRAINT "ORDER_ITEMS_ORDER_ID_FK" FOREIGN KEY ("ORDER_ID")
	  REFERENCES "ORDERS" ("ORDER_ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "ORDER_ITEMS" ADD CONSTRAINT "ORDER_ITEMS_PRODUCT_ID_FK" FOREIGN KEY ("PRODUCT_ID")
	  REFERENCES "PRODUCTS" ("PRODUCT_ID") ON DELETE CASCADE ENABLE;

   COMMENT ON COLUMN "ORDER_ITEMS"."ORDER_ID" IS 'The order these products belong to';
   COMMENT ON COLUMN "ORDER_ITEMS"."LINE_ITEM_ID" IS 'An incrementing number, starting at one for each order';
   COMMENT ON COLUMN "ORDER_ITEMS"."PRODUCT_ID" IS 'Which item was purchased';
   COMMENT ON COLUMN "ORDER_ITEMS"."UNIT_PRICE" IS 'How much the customer paid for one item of the product';
   COMMENT ON COLUMN "ORDER_ITEMS"."QUANTITY" IS 'How many items of this product the customer purchased';
   COMMENT ON TABLE "ORDER_ITEMS"  IS 'Details of which products the customer has purchased in an order';

  ALTER TABLE "PRODUCTS" ADD CONSTRAINT "PRODUCTS_COLOR_FK" FOREIGN KEY ("COLOR_ID")
	  REFERENCES "COLOR_LOOKUP" ("COLOR_ID") ENABLE;
  ALTER TABLE "PRODUCTS" ADD CONSTRAINT "PRODUCTS_DEPARTMENT_FK" FOREIGN KEY ("DEPARTMENT_ID")
	  REFERENCES "DEPARTMENT_LOOKUP" ("DEPARTMENT_ID") ENABLE;
  ALTER TABLE "PRODUCTS" ADD CONSTRAINT "PRODUCTS_CLOTHING_FK" FOREIGN KEY ("CLOTHING_ID")
	  REFERENCES "CLOTHING_LOOKUP" ("CLOTHING_ID") ENABLE;

   COMMENT ON COLUMN "PRODUCTS"."PRODUCT_ID" IS 'Auto-incrementing primary key';
   COMMENT ON COLUMN "PRODUCTS"."PRODUCT_NAME" IS 'What a product is called';
   COMMENT ON COLUMN "PRODUCTS"."UNIT_PRICE" IS 'The monetary value of one item of this producty';
   COMMENT ON COLUMN "PRODUCTS"."PRODUCT_DETAILS" IS 'Further details of the product stored in JSON format';
   COMMENT ON COLUMN "PRODUCTS"."PRODUCT_IMAGE" IS 'A picture of the product';
   COMMENT ON COLUMN "PRODUCTS"."IMAGE_MIME_TYPE" IS 'The mime-type of the product image';
   COMMENT ON COLUMN "PRODUCTS"."IMAGE_FILENAME" IS 'The name of the file loaded in the image column';
   COMMENT ON COLUMN "PRODUCTS"."IMAGE_CHARSET" IS 'The character set used to encode the image';
   COMMENT ON COLUMN "PRODUCTS"."IMAGE_LAST_UPDATED" IS 'The date the image was last changed';
   COMMENT ON TABLE "PRODUCTS"  IS 'Details of goods that customers can purchase';

   COMMENT ON COLUMN "STORES"."STORE_ID" IS 'Auto-incrementing primary key';
   COMMENT ON COLUMN "STORES"."STORE_NAME" IS 'What the store is called';
   COMMENT ON COLUMN "STORES"."WEB_ADDRESS" IS 'The URL of a virtual store';
   COMMENT ON COLUMN "STORES"."PHYSICAL_ADDRESS" IS 'The postal address of this location';
   COMMENT ON COLUMN "STORES"."LATITUDE" IS 'The north-south position of a physical store';
   COMMENT ON COLUMN "STORES"."LONGITUDE" IS 'The east-west position of a physical store';
   COMMENT ON COLUMN "STORES"."LOGO" IS 'An image used by this store';
   COMMENT ON COLUMN "STORES"."LOGO_MIME_TYPE" IS 'The mime-type of the store logo';
   COMMENT ON COLUMN "STORES"."LOGO_FILENAME" IS 'The name of the file loaded in the image column';
   COMMENT ON COLUMN "STORES"."LOGO_CHARSET" IS 'The character set used to encode the image';
   COMMENT ON COLUMN "STORES"."LOGO_LAST_UPDATED" IS 'The date the image was last changed';
   COMMENT ON TABLE "STORES"  IS 'Physical and virtual locations where people can purchase products';

   COMMENT ON COLUMN "CUSTOMER_ORDER_PRODUCTS"."ORDER_ID" IS 'The primary key of the order';
   COMMENT ON COLUMN "CUSTOMER_ORDER_PRODUCTS"."ORDER_DATETIME" IS 'The date and time the order was placed';
   COMMENT ON COLUMN "CUSTOMER_ORDER_PRODUCTS"."ORDER_STATUS" IS 'The current state of this order';
   COMMENT ON COLUMN "CUSTOMER_ORDER_PRODUCTS"."CUSTOMER_ID" IS 'The primary key of the customer';
   COMMENT ON COLUMN "CUSTOMER_ORDER_PRODUCTS"."EMAIL_ADDRESS" IS 'The email address the person uses to access the account';
   COMMENT ON COLUMN "CUSTOMER_ORDER_PRODUCTS"."FULL_NAME" IS 'What this customer is called';
   COMMENT ON COLUMN "CUSTOMER_ORDER_PRODUCTS"."ORDER_TOTAL" IS 'The total amount the customer paid for the order';
   COMMENT ON COLUMN "CUSTOMER_ORDER_PRODUCTS"."ITEMS" IS 'A comma-separated list naming the products in this order';
   COMMENT ON TABLE "CUSTOMER_ORDER_PRODUCTS"  IS 'A summary of who placed each order and what they bought';

   COMMENT ON COLUMN "PRODUCT_ORDERS"."PRODUCT_NAME" IS 'What this product is called';
   COMMENT ON COLUMN "PRODUCT_ORDERS"."ORDER_STATUS" IS 'The current state of these order';
   COMMENT ON COLUMN "PRODUCT_ORDERS"."TOTAL_SALES" IS 'The total value of orders placed';
   COMMENT ON COLUMN "PRODUCT_ORDERS"."ORDER_COUNT" IS 'The total number of orders placed';
   COMMENT ON TABLE "PRODUCT_ORDERS"  IS 'A summary of the state of the orders placed for each product';

   COMMENT ON COLUMN "PRODUCT_REVIEWS"."PRODUCT_NAME" IS 'What this product is called';
   COMMENT ON COLUMN "PRODUCT_REVIEWS"."RATING" IS 'The review score the customer has placed. Range is 1-10';
   COMMENT ON COLUMN "PRODUCT_REVIEWS"."AVG_RATING" IS 'The mean of the review scores for this product';
   COMMENT ON COLUMN "PRODUCT_REVIEWS"."REVIEW" IS 'The text of the review';
   COMMENT ON TABLE "PRODUCT_REVIEWS"  IS 'A relational view of the reviews stored in the JSON for each product';

   COMMENT ON COLUMN "STORE_ORDERS"."TOTAL" IS 'Indicates what type of total is displayed, including Store, Status, or Grand Totals';
   COMMENT ON COLUMN "STORE_ORDERS"."STORE_NAME" IS 'What the store is called';
   COMMENT ON COLUMN "STORE_ORDERS"."ADDRESS" IS 'The physical or virtual location of this store';
   COMMENT ON COLUMN "STORE_ORDERS"."LATITUDE" IS 'The north-south position of a physical store';
   COMMENT ON COLUMN "STORE_ORDERS"."LONGITUDE" IS 'The east-west position of a physical store';
   COMMENT ON COLUMN "STORE_ORDERS"."ORDER_STATUS" IS 'The current state of this order';
   COMMENT ON COLUMN "STORE_ORDERS"."ORDER_COUNT" IS 'The primary key of the order';
   COMMENT ON COLUMN "STORE_ORDERS"."TOTAL_SALES" IS 'The total value of orders placed';
   COMMENT ON TABLE "STORE_ORDERS"  IS 'A summary of what was purchased at each location, including summaries each store, order status and overall total';

   COMMENT ON COLUMN "STORE_ORDERS_STATUS"."STORE_NAME" IS 'What the store is called';
   COMMENT ON COLUMN "STORE_ORDERS_STATUS"."ADDRESS" IS 'The physical or virtual location of this store';
   COMMENT ON COLUMN "STORE_ORDERS_STATUS"."LATITUDE" IS 'The north-south position of a physical store';
   COMMENT ON COLUMN "STORE_ORDERS_STATUS"."LONGITUDE" IS 'The east-west position of a physical store';
   COMMENT ON COLUMN "STORE_ORDERS_STATUS"."ORDER_STATUS" IS 'The current state of this order';
   COMMENT ON COLUMN "STORE_ORDERS_STATUS"."ORDER_COUNT" IS 'The primary key of the order';
   COMMENT ON COLUMN "STORE_ORDERS_STATUS"."TOTAL_SALES" IS 'The total value of orders placed';
   COMMENT ON TABLE "STORE_ORDERS_STATUS"  IS 'A summary of what was purchased at each location for each order status';

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "CUSTOMER_ORDER_PRODUCTS" ("ORDER_ID", "ORDER_DATETIME", "ORDER_STATUS", "CUSTOMER_ID", "EMAIL_ADDRESS", "FULL_NAME", "ORDER_TOTAL", "ITEMS") AS 
  select o.order_id
,      o.order_datetime
,      o.order_status
,      c.customer_id
,      c.email_address
,      c.full_name
,      sum ( oi.quantity * oi.unit_price ) order_total
,      listagg (p.product_name, ', ' on overflow truncate '...' with count)
         within group ( order by oi.line_item_id ) items
from orders o
join order_items oi
  on o.order_id = oi.order_id
join customers c
  on o.customer_id = c.customer_id
join products p
  on oi.product_id = p.product_id
group by o.order_id
,        o.order_datetime
,        o.order_status
,        c.customer_id
,        c.email_address
,        c.full_name;

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "EBA_PROJECTS_COMPLETED_V" ("ID", "NAME", "PROJECT_LEAD", "COMPLETED_DATE", "BUDGET", "COST", "TASKS_ON_TIME", "TASKS_LATE", "TASKS_INCOMPLETE", "MILESTONES_ON_TIME", "MILESTONES_LATE", "MILESTONES_INCOMPLETE") AS 
  select p.id
,      p.name
,      p.project_lead
,      p.completed_date
,      p.budget
,      (select sum(t.cost)
        from eba_project_tasks t
        where t.project_id = p.id
       ) cost
,      (  (select count(*)
           from eba_project_milestones m
           ,    eba_project_tasks t
           where t.project_id = p.id
           and   t.milestone_id = m.id
           and   nvl(t.is_complete_yn,'N') = 'Y'
           and   t.end_date <= m.due_date
          )
        + (select count(*)
           from eba_project_tasks t
           where t.project_id = p.id
           and   t.milestone_id is null
           and   nvl(t.is_complete_yn,'N') = 'Y'
          )
       ) tasks_on_time 
,      (select count(*)
        from eba_project_milestones m
        ,    eba_project_tasks t
        where t.project_id = p.id
        and   t.milestone_id = m.id
        and   nvl(t.is_complete_yn,'N') = 'Y'
        and   t.end_date > m.due_date
       ) tasks_late
,      (select count(*)
        from eba_project_tasks t
        where t.project_id = p.id
        and   nvl(t.is_complete_yn,'N') = 'N'
       ) tasks_incomplete
,      (select count(*)
        from eba_project_milestones m
        where m.project_id = p.id
        and   not exists (select t.id
                          from eba_project_tasks t
                          where t.milestone_id = m.id
                          and   nvl(t.is_complete_yn,'N') = 'Y'
                          and   t.end_date > m.due_date
                         )
       ) milestones_on_time
,      (select count(*)
        from eba_project_milestones m
        where m.project_id = p.id
        and   exists (select t.id
                      from eba_project_tasks t
                      where t.milestone_id = m.id
                      and   nvl(t.is_complete_yn,'N') = 'Y'
                      and   t.end_date > m.due_date
                     )
       ) milestones_late
,      (select count(*)
        from eba_project_milestones m
        where m.project_id = p.id
        and   exists (select t.id
                      from eba_project_tasks t
                      where t.milestone_id = m.id
                      and   nvl(t.is_complete_yn,'N') = 'N'
                     )
       ) milestones_incomplete
from eba_projects p
where p.status_id = 3;

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "EBA_PROJECTS_V" ("ID", "NAME", "STATUS", "PROJECT_LEAD", "COMPLETED_DATE", "BUDGET", "COST", "BUDGET_V_COST", "MILESTONES", "TASKS") AS 
  select p.id
,      p.name
,      s.description status
,      p.project_lead
,      p.completed_date
,      p.budget
,      (select sum(t.cost)
        from eba_project_tasks t
        where t.project_id = p.id
       ) cost
,       p.budget - (select sum(t.cost)
                   from eba_project_tasks t
                   where t.project_id = p.id
       ) budget_v_cost
,      (select count(*)
        from eba_project_milestones m
        where m.project_id = p.id
       ) milestones 
,      (select count(*)
        from eba_project_tasks t
        where t.project_id = p.id
       ) tasks
from eba_projects p
,    eba_project_status s
where s.id = p.status_id;

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "EMP_V" ("DEPARTMENT_ID", "DEPARTMENT_NAME", "LOCATION", "COUNTRY", "EMPLOYEE_ID", "EMPLOYEE_NAME", "EMAIL", "COST_CENTER", "DATE_HIRED", "JOB") AS 
  select 
    departments.id           department_id, 
    departments.name         department_name, 
    departments.location     location, 
    departments.country      country, 
    employees.id             employee_id, 
    employees.name           employee_name, 
    employees.email          email, 
    employees.cost_center    cost_center, 
    employees.date_hired     date_hired, 
    employees.job            job 
from 
    departments, 
    employees 
where 
    employees.department_id(+) = departments.id;

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "PRODUCT_ORDERS" ("PRODUCT_NAME", "ORDER_STATUS", "TOTAL_SALES", "ORDER_COUNT") AS 
  select p.product_name
,      o.order_status
,      sum ( oi.quantity * oi.unit_price ) total_sales
,      count (*) order_count
from orders o
join order_items oi
  on o.order_id = oi.order_id
join customers c
  on o.customer_id = c.customer_id
join products p
  on oi.product_id = p.product_id
group by p.product_name
,        o.order_status;

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "PRODUCT_REVIEWS" ("PRODUCT_NAME", "RATING", "AVG_RATING", "REVIEW") AS 
  select p.product_name
,      r.rating
,      round (avg (r.rating) over (partition by product_name), 2) avg_rating
,      r.review
from products p
,    json_table
       (p.product_details, '$'
        columns (nested path '$.reviews[*]'
                 columns (  rating number path '$.rating'
                          , review varchar2(4000) path '$.review'
                         )
                )
       ) r;

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "STORE_ORDERS" ("TOTAL", "STORE_NAME", "ADDRESS", "LATITUDE", "LONGITUDE", "ORDER_STATUS", "ORDER_COUNT", "TOTAL_SALES") AS 
  select case
         grouping_id ( store_name, order_status )
           when 1 then 'STORE TOTAL'
           when 2 then 'STATUS TOTAL'
           when 3 then 'GRAND TOTAL'
       end total
,      s.store_name
,      coalesce ( s.web_address, s.physical_address ) address
,      s.latitude
,      s.longitude
,      o.order_status
,      count ( distinct o.order_id ) order_count
,      sum ( oi.quantity * oi.unit_price ) total_sales
from stores s
join orders o
  on s.store_id = o.store_id
join order_items oi
  on o.order_id = oi.order_id
group by grouping sets (  (s.store_name, coalesce(s.web_address,s.physical_address), s.latitude, s.longitude)
                        , (s.store_name, coalesce(s.web_address,s.physical_address), s.latitude, s.longitude, o.order_status)
                        , o.order_status
                        , ()
                       );

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "STORE_ORDERS_STATUS" ("STORE_NAME", "ADDRESS", "LATITUDE", "LONGITUDE", "ORDER_STATUS", "ORDER_COUNT", "TOTAL_SALES") AS 
  select s.store_name
,      coalesce ( s.web_address, s.physical_address ) address
,      s.latitude
,      s.longitude
,      o.order_status
,      count ( distinct o.order_id ) order_count
,      sum ( oi.quantity * oi.unit_price ) total_sales
from stores s
join orders o
  on s.store_id = o.store_id
join order_items oi
  on o.order_id = oi.order_id
group by s.store_name, coalesce ( s.web_address, s.physical_address ), s.latitude, s.longitude, o.order_status;

   COMMENT ON COLUMN "CUSTOMERS"."CUSTOMER_ID" IS 'Auto-incrementing primary key';
   COMMENT ON COLUMN "CUSTOMERS"."FULL_NAME" IS 'What this customer is called';
   COMMENT ON COLUMN "CUSTOMERS"."EMAIL_ADDRESS" IS 'The email address the person uses to access the account';
   COMMENT ON TABLE "CUSTOMERS"  IS 'Details of the people placing orders';

  CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_EBA_DEMO_IR_PROJECTS" 
BEFORE INSERT OR UPDATE ON EBA_DEMO_IR_PROJECTS
FOR EACH ROW
BEGIN
   if :new."ID" is null then
     select to_number(sys_guid(),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX') into :new.id from dual;
   end if;
   if inserting then
       :new.row_version_number := 1;
   elsif updating then
       :new.row_version_number := nvl(:old.row_version_number,1) + 1;
   end if;
   if :new.start_date > :new.end_date then
       RAISE_APPLICATION_ERROR(-20001, 'Error start date must be before end date');
   end if;
END;
/
ALTER TRIGGER "BIU_EBA_DEMO_IR_PROJECTS" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "EBA_PROJECTS_BIU" 
    before insert or update on eba_projects
    for each row
begin
    if inserting then
        :new.created    := current_timestamp;
        :new.created_by := nvl(wwv_flow.g_user,user);
    end if;
    :new.updated    := current_timestamp;
    :new.updated_by := nvl(wwv_flow.g_user,user);
end;
/
ALTER TRIGGER "EBA_PROJECTS_BIU" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "EBA_PROJECT_COMMENTS_BIU" 
    before insert or update on eba_project_comments
    for each row
begin
    if inserting then
        :new.created    := current_timestamp;
        :new.created_by := nvl(wwv_flow.g_user,user);
    end if;
    :new.updated    := current_timestamp;
    :new.updated_by := nvl(wwv_flow.g_user,user);
end;
/
ALTER TRIGGER "EBA_PROJECT_COMMENTS_BIU" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "EBA_PROJECT_MILESTONES_BIU" 
    before insert or update on eba_project_milestones
    for each row
begin
    if inserting then
        :new.created    := current_timestamp;
        :new.created_by := nvl(wwv_flow.g_user,user);
    end if;
    :new.updated    := current_timestamp;
    :new.updated_by := nvl(wwv_flow.g_user,user);
end;
/
ALTER TRIGGER "EBA_PROJECT_MILESTONES_BIU" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "EBA_PROJECT_STATUS_BIU" 
before insert or update on eba_project_status
    for each row
begin
    if inserting then
        :new.created    := current_timestamp;
        :new.created_by := nvl(wwv_flow.g_user,user);
    end if;
    :new.code       := upper(:new.code);
    :new.updated    := current_timestamp;
    :new.updated_by := nvl(wwv_flow.g_user,user);
end;
/
ALTER TRIGGER "EBA_PROJECT_STATUS_BIU" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "EBA_PROJECT_TASKS_BIU" 
    before insert or update on eba_project_tasks
    for each row
begin
    if inserting then
        :new.created    := current_timestamp;
        :new.created_by := nvl(wwv_flow.g_user,user);
    end if;
    :new.updated    := current_timestamp;
    :new.updated_by := nvl(wwv_flow.g_user,user);
end;
/
ALTER TRIGGER "EBA_PROJECT_TASKS_BIU" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "EBA_PROJECT_TASK_LINKS_BIU" 
    before insert or update on eba_project_task_links
    for each row
begin
    if inserting then
        :new.created    := current_timestamp;
        :new.created_by := nvl(wwv_flow.g_user,user);
    end if;
    :new.updated    := current_timestamp;
    :new.updated_by := nvl(wwv_flow.g_user,user);
end;
/
ALTER TRIGGER "EBA_PROJECT_TASK_LINKS_BIU" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "EBA_PROJECT_TASK_TODOS_BIU" 
    before insert or update on eba_project_task_todos
    for each row
begin
    if inserting then
        :new.created    := current_timestamp;
        :new.created_by := nvl(wwv_flow.g_user,user);
    end if;
    :new.updated    := current_timestamp;
    :new.updated_by := nvl(wwv_flow.g_user,user);
end;
/
ALTER TRIGGER "EBA_PROJECT_TASK_TODOS_BIU" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "EMPLOYEES_BIU" 
    before insert or update 
    on employees 
    for each row 
begin 
    :new.email := lower(:new.email); 
end employees_biu;
/
ALTER TRIGGER "EMPLOYEES_BIU" ENABLE;

   COMMENT ON COLUMN "ORDERS"."ORDER_ID" IS 'Auto-incrementing primary key';
   COMMENT ON COLUMN "ORDERS"."ORDER_DATETIME" IS 'When the order was placed';
   COMMENT ON COLUMN "ORDERS"."CUSTOMER_ID" IS 'Who placed this order';
   COMMENT ON COLUMN "ORDERS"."ORDER_STATUS" IS 'What state the order is in. Valid values are:
OPEN - the order is in progress.
PAID - money has been received from the customer for this order.
SHIPPED - the products have been dispatched to the customer.
COMPLETE - the customer has received the order.
CANCELLED - the customer has stopped the order.
REFUNDED - there has been an issue with the order and the money has been returned to the customer.';
   COMMENT ON COLUMN "ORDERS"."STORE_ID" IS 'Where this order was placed';
   COMMENT ON TABLE "ORDERS"  IS 'Details of who made purchases where';

   COMMENT ON COLUMN "ORDER_ITEMS"."ORDER_ID" IS 'The order these products belong to';
   COMMENT ON COLUMN "ORDER_ITEMS"."LINE_ITEM_ID" IS 'An incrementing number, starting at one for each order';
   COMMENT ON COLUMN "ORDER_ITEMS"."PRODUCT_ID" IS 'Which item was purchased';
   COMMENT ON COLUMN "ORDER_ITEMS"."UNIT_PRICE" IS 'How much the customer paid for one item of the product';
   COMMENT ON COLUMN "ORDER_ITEMS"."QUANTITY" IS 'How many items of this product the customer purchased';
   COMMENT ON TABLE "ORDER_ITEMS"  IS 'Details of which products the customer has purchased in an order';

   COMMENT ON COLUMN "PRODUCTS"."PRODUCT_ID" IS 'Auto-incrementing primary key';
   COMMENT ON COLUMN "PRODUCTS"."PRODUCT_NAME" IS 'What a product is called';
   COMMENT ON COLUMN "PRODUCTS"."UNIT_PRICE" IS 'The monetary value of one item of this producty';
   COMMENT ON COLUMN "PRODUCTS"."PRODUCT_DETAILS" IS 'Further details of the product stored in JSON format';
   COMMENT ON COLUMN "PRODUCTS"."PRODUCT_IMAGE" IS 'A picture of the product';
   COMMENT ON COLUMN "PRODUCTS"."IMAGE_MIME_TYPE" IS 'The mime-type of the product image';
   COMMENT ON COLUMN "PRODUCTS"."IMAGE_FILENAME" IS 'The name of the file loaded in the image column';
   COMMENT ON COLUMN "PRODUCTS"."IMAGE_CHARSET" IS 'The character set used to encode the image';
   COMMENT ON COLUMN "PRODUCTS"."IMAGE_LAST_UPDATED" IS 'The date the image was last changed';
   COMMENT ON TABLE "PRODUCTS"  IS 'Details of goods that customers can purchase';

   COMMENT ON COLUMN "STORES"."STORE_ID" IS 'Auto-incrementing primary key';
   COMMENT ON COLUMN "STORES"."STORE_NAME" IS 'What the store is called';
   COMMENT ON COLUMN "STORES"."WEB_ADDRESS" IS 'The URL of a virtual store';
   COMMENT ON COLUMN "STORES"."PHYSICAL_ADDRESS" IS 'The postal address of this location';
   COMMENT ON COLUMN "STORES"."LATITUDE" IS 'The north-south position of a physical store';
   COMMENT ON COLUMN "STORES"."LONGITUDE" IS 'The east-west position of a physical store';
   COMMENT ON COLUMN "STORES"."LOGO" IS 'An image used by this store';
   COMMENT ON COLUMN "STORES"."LOGO_MIME_TYPE" IS 'The mime-type of the store logo';
   COMMENT ON COLUMN "STORES"."LOGO_FILENAME" IS 'The name of the file loaded in the image column';
   COMMENT ON COLUMN "STORES"."LOGO_CHARSET" IS 'The character set used to encode the image';
   COMMENT ON COLUMN "STORES"."LOGO_LAST_UPDATED" IS 'The date the image was last changed';
   COMMENT ON TABLE "STORES"  IS 'Physical and virtual locations where people can purchase products';

   COMMENT ON COLUMN "CUSTOMER_ORDER_PRODUCTS"."ORDER_ID" IS 'The primary key of the order';
   COMMENT ON COLUMN "CUSTOMER_ORDER_PRODUCTS"."ORDER_DATETIME" IS 'The date and time the order was placed';
   COMMENT ON COLUMN "CUSTOMER_ORDER_PRODUCTS"."ORDER_STATUS" IS 'The current state of this order';
   COMMENT ON COLUMN "CUSTOMER_ORDER_PRODUCTS"."CUSTOMER_ID" IS 'The primary key of the customer';
   COMMENT ON COLUMN "CUSTOMER_ORDER_PRODUCTS"."EMAIL_ADDRESS" IS 'The email address the person uses to access the account';
   COMMENT ON COLUMN "CUSTOMER_ORDER_PRODUCTS"."FULL_NAME" IS 'What this customer is called';
   COMMENT ON COLUMN "CUSTOMER_ORDER_PRODUCTS"."ORDER_TOTAL" IS 'The total amount the customer paid for the order';
   COMMENT ON COLUMN "CUSTOMER_ORDER_PRODUCTS"."ITEMS" IS 'A comma-separated list naming the products in this order';
   COMMENT ON TABLE "CUSTOMER_ORDER_PRODUCTS"  IS 'A summary of who placed each order and what they bought';

   COMMENT ON COLUMN "PRODUCT_ORDERS"."PRODUCT_NAME" IS 'What this product is called';
   COMMENT ON COLUMN "PRODUCT_ORDERS"."ORDER_STATUS" IS 'The current state of these order';
   COMMENT ON COLUMN "PRODUCT_ORDERS"."TOTAL_SALES" IS 'The total value of orders placed';
   COMMENT ON COLUMN "PRODUCT_ORDERS"."ORDER_COUNT" IS 'The total number of orders placed';
   COMMENT ON TABLE "PRODUCT_ORDERS"  IS 'A summary of the state of the orders placed for each product';

   COMMENT ON COLUMN "PRODUCT_REVIEWS"."PRODUCT_NAME" IS 'What this product is called';
   COMMENT ON COLUMN "PRODUCT_REVIEWS"."RATING" IS 'The review score the customer has placed. Range is 1-10';
   COMMENT ON COLUMN "PRODUCT_REVIEWS"."AVG_RATING" IS 'The mean of the review scores for this product';
   COMMENT ON COLUMN "PRODUCT_REVIEWS"."REVIEW" IS 'The text of the review';
   COMMENT ON TABLE "PRODUCT_REVIEWS"  IS 'A relational view of the reviews stored in the JSON for each product';

   COMMENT ON COLUMN "STORE_ORDERS"."TOTAL" IS 'Indicates what type of total is displayed, including Store, Status, or Grand Totals';
   COMMENT ON COLUMN "STORE_ORDERS"."STORE_NAME" IS 'What the store is called';
   COMMENT ON COLUMN "STORE_ORDERS"."ADDRESS" IS 'The physical or virtual location of this store';
   COMMENT ON COLUMN "STORE_ORDERS"."LATITUDE" IS 'The north-south position of a physical store';
   COMMENT ON COLUMN "STORE_ORDERS"."LONGITUDE" IS 'The east-west position of a physical store';
   COMMENT ON COLUMN "STORE_ORDERS"."ORDER_STATUS" IS 'The current state of this order';
   COMMENT ON COLUMN "STORE_ORDERS"."ORDER_COUNT" IS 'The primary key of the order';
   COMMENT ON COLUMN "STORE_ORDERS"."TOTAL_SALES" IS 'The total value of orders placed';
   COMMENT ON TABLE "STORE_ORDERS"  IS 'A summary of what was purchased at each location, including summaries each store, order status and overall total';

   COMMENT ON COLUMN "STORE_ORDERS_STATUS"."STORE_NAME" IS 'What the store is called';
   COMMENT ON COLUMN "STORE_ORDERS_STATUS"."ADDRESS" IS 'The physical or virtual location of this store';
   COMMENT ON COLUMN "STORE_ORDERS_STATUS"."LATITUDE" IS 'The north-south position of a physical store';
   COMMENT ON COLUMN "STORE_ORDERS_STATUS"."LONGITUDE" IS 'The east-west position of a physical store';
   COMMENT ON COLUMN "STORE_ORDERS_STATUS"."ORDER_STATUS" IS 'The current state of this order';
   COMMENT ON COLUMN "STORE_ORDERS_STATUS"."ORDER_COUNT" IS 'The primary key of the order';
   COMMENT ON COLUMN "STORE_ORDERS_STATUS"."TOTAL_SALES" IS 'The total value of orders placed';
   COMMENT ON TABLE "STORE_ORDERS_STATUS"  IS 'A summary of what was purchased at each location for each order status';